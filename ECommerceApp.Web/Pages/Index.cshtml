@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<style>
    input[type="date"]::-webkit-calendar-picker-indicator {
        opacity: 0;
        cursor: pointer;
        position: absolute;
        right: 0;
        width: 100%;
        height: 100%;
    }

    input[type="date"] {
        position: relative;
    }

    input[type="date"]::-moz-focus-inner {
        border: 0;
    }
</style>

<div class="grid grid-cols-1 sm:grid-cols-3 gap-6">
    <div class="bg-gradient-to-br from-blue-500 to-blue-700 rounded-xl shadow-sm p-6 text-white">
        <div class="flex items-center mb-3">
            <svg class="w-8 h-8 text-white mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3 3h18v4H3V3zm0 6h18v12H3V9z" />
            </svg>
        </div>
        <h3 id="totalProduct" class="text-[18px] font-semibold">Total Product: 50</h3>
        <p class="text-[14px]">Warehouse has a total of 50 products today & the max capacity is 200.</p>
    </div>
    <div class="bg-gradient-to-br from-blue-500 to-blue-700 rounded-xl shadow-sm p-6 text-white">
        <div class="flex items-center mb-3">
            <svg class="w-8 h-8 text-white mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round"
                    d="M17 20h5v-2a4 4 0 00-3-3.87M9 20H4v-2a4 4 0 013-3.87M16 3.13a4 4 0 010 7.75M8 3.13a4 4 0 000 7.75" />
            </svg>
        </div>
        <h3 id="totalVendor" class="text-[18px] font-semibold">Total Vendor: 10</h3>
        <p class="text-[14px]">A total of 10 out of 10 vendors are available for supply now.</p>
    </div>
    <div class="bg-gradient-to-br from-blue-500 to-blue-700 rounded-xl shadow-sm p-6 text-white">
        <div class="flex items-center mb-3">
            <svg class="w-8 h-8 text-white mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round"
                    d="M20 13V7a2 2 0 00-2-2H6a2 2 0 00-2 2v6m16 0v6a2 2 0 01-2 2H6a2 2 0 01-2-2v-6m16 0H4" />
            </svg>
        </div>
        <h3 id="totalUniqueProduct" class="text-[18px] font-semibold">Unique Product: 6</h3>
        <p class="text-[14px]">Total number of products that are not duplicate.</p>
    </div>
</div>

<div class="flex flex-col md:flex-row items-stretch md:items-center gap-4 mb-6 mt-[25px]">
    <div class="relative flex-1">
        <input type="text" placeholder="Search product by name..."
            class="w-full pl-4 pr-10 py-2 border border-gray-300 bg-gray-100 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" />
        <svg class="w-5 h-5 text-blue-500 absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none"
            fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round"
                d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 103 10.5a7.5 7.5 0 0013.15 6.15z" />
        </svg>
    </div>
    <button id="add-product-toggle"
        class="group flex items-center justify-center px-4 py-2 border border-blue-500 text-blue-500 rounded-md text-sm font-medium hover:bg-blue-500 hover:text-white transition">
        <svg class="w-4 h-4 mr-2 text-blue-500 group-hover:text-white transition" fill="none" stroke="currentColor"
            stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
        </svg>
        Add Product
    </button>
</div>

<div id="add-product-modal"
    class="fixed p-10 bg-[rgba(0,0,0,0.4)] inset-0 flex items-center justify-center hidden z-50">
    <div class="bg-white p-10 rounded-lg w-full max-w-2xl relative">
        <button id="modal-close" class="absolute top-3 right-3 text-[#777777] hover:text-[#252C32] z-50">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
        <h2 class="text-lg font-bold text-[#252C32] mb-1">Add New Product</h2>
        <p class="text-xs text-[#5F6D7E] mb-4">Add description of your new product.</p>
        <form id="add-product-form" enctype="multipart/form-data" class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div class="md:col-span-2">
                <label class="block font-semibold mb-1">Product Name</label>
                <input type="text" name="Name" placeholder="Product Name" required
                    class="w-full border border-[#E5E9EB] p-2 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
            </div>
            <div>
                <label class="block font-semibold mb-1">Slug</label>
                <div class="flex">
                    <input type="text" name="Slug" placeholder="product-name" required
                        class="flex-1 border border-[#E5E9EB] p-2 rounded-l-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
                    <button type="button" onclick="generateSlug()"
                        class="bg-[#2F80ED] text-white border border-[#2F80ED] px-3 py-2 rounded-r-md hover:bg-[#2568C1] font-medium transition text-xs">
                        Generate
                    </button>
                </div>
            </div>
            <div>
                <label class="block font-semibold mb-1">Price</label>
                <input type="number" name="Price" placeholder="Price" step="0.01" required
                    class="w-full border border-[#E5E9EB] p-2 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
            </div>
            <div class="relative">
                <label class="block font-semibold mb-1">Discount Start</label>
                <input type="date" name="DiscountStartDate" id="discount-start"
                    class="w-full border border-[#E5E9EB] p-2 pr-8 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
                <svg class="absolute right-2 top-[38px] w-4 h-4 text-[#2F80ED] pointer-events-none" fill="none"
                    stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M8 7V3m8 4V3M3 11h18M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
            </div>
            <div class="relative">
                <label class="block font-semibold mb-1">Discount End</label>
                <input type="date" name="DiscountEndDate" id="discount-end"
                    class="w-full border border-[#E5E9EB] p-2 pr-8 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
                <svg class="absolute right-2 top-[38px] w-4 h-4 text-[#2F80ED] pointer-events-none" fill="none"
                    stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M8 7V3m8 4V3M3 11h18M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
            </div>
            <div>
                <label class="block font-semibold mb-1">Discount Percentage</label>
                <input type="number" name="DiscountPercent" placeholder="Discount Percentage" step="0.01"
                    class="w-full border border-[#E5E9EB] p-2 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
            </div>
            <div>
                <label class="block font-semibold mb-1">Product Image</label>
                <input type="file" name="ImageFile" accept="image/*"
                    class="w-full border border-[#E5E9EB] p-2 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2F80ED]" />
            </div>
            <div class="md:col-span-2">
                <button type="submit"
                    class="bg-[#2F80ED] text-white font-semibold text-sm px-3 py-2 rounded-md w-full hover:bg-[#2568C1] transition">
                    Add Product
                </button>
            </div>
        </form>
    </div>
</div>

<div class="max-w-screen-xl mx-auto p-4 space-y-6">
    <div class="text-black font-bold text-lg">
        Showing 1–8 of 100 results
    </div>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        <div class="rounded-lg overflow-hidden shadow-sm flex flex-col">
            <img src="/images/placeholder.jpg" alt="Product" class="w-full h-48 object-cover" />
            <div class="p-4 flex flex-col gap-2">
                <h3 class="font-semibold text-sm text-[#252C32]">Product Title</h3>
                <div class="flex items-center space-x-2 text-sm">
                    <span class="text-[#2F80ED] font-semibold">$499</span>
                    <del class="text-gray-500">$599</del>
                </div>
                <button
                    class="mt-2 w-fit px-3 py-1 text-sm text-black bg-white border border-gray-300 rounded hover:bg-[#2F80ED] hover:text-white transition">
                    Add to Cart
                </button>
            </div>
        </div>
        <!-- Other static product cards removed for brevity -->
    </div>
    <div class="flex justify-end items-center flex-wrap gap-4 pt-6">
        <div class="flex items-center gap-2 text-sm">
            <button class="px-2 py-1 rounded hover:bg-gray-200">←</button>
            <button class="px-3 py-1 rounded bg-[#2F80ED] text-white">1</button>
            <button class="px-3 py-1 rounded hover:bg-gray-200">2</button>
            <button class="px-3 py-1 rounded hover:bg-gray-200">3</button>
            <button class="px-3 py-1 rounded hover:bg-gray-200">4</button>
            <button class="px-3 py-1 rounded hover:bg-gray-200">5</button>
            <span>...</span>
            <button class="px-3 py-1 rounded hover:bg-gray-200">20</button>
            <button class="px-2 py-1 rounded hover:bg-gray-200">Next →</button>
        </div>
        <div class="text-sm">
            <select id="per-page" class="border border-gray-300 rounded px-2 py-1">
                <option value="8" selected>8 per page</option>
                <option value="10">10 per page</option>
                <option value="20">20 per page</option>
                <option value="50">50 per page</option>
            </select>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const API_BASE_URL = 'http://localhost:5099';
        const form = document.getElementById('add-product-form');
        const modal = document.getElementById('add-product-modal');
        const closeModalBtn = document.getElementById('modal-close');
        const addProductToggle = document.getElementById('add-product-toggle');
        const searchInput = document.querySelector('input[placeholder="Search product by name..."]');
        const productGrid = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-4');
        const resultsCount = document.querySelector('.text-black.font-bold.text-lg');
        const paginationContainer = document.querySelector('.flex.items-center.gap-2.text-sm');
        const perPageSelect = document.getElementById('per-page');
        const totalProductCard = document.getElementById('totalProduct');
        const totalVendorCard = document.getElementById('totalVendor');
        const uniqueProductCard = document.getElementById('totalUniqueProduct');
        const cartItemsContainer = document.getElementById('cart-items');
        const cartCount = document.getElementById('cart-count');
        const cartSubtotal = document.getElementById('cart-subtotal');
        const userId = '1';

        let currentPage = 1;
        let pageSize = parseInt(perPageSelect?.value) || 8;
        let cartItems = [];

        // Verify DOM elements
        console.log('DOM elements initialized:', {
            cartItemsContainer: !!cartItemsContainer,
            cartCount: !!cartCount,
            cartSubtotal: !!cartSubtotal,
            paginationContainer: !!paginationContainer
        });

        function generateSlug() {
            const nameInput = document.querySelector('input[name="Name"]');
            const slugInput = document.querySelector('input[name="Slug"]');
            if (nameInput && slugInput) {
                slugInput.value = nameInput.value
                    .trim()
                    .toLowerCase()
                    .replace(/\s+/g, '-')
                    .replace(/[^a-z0-9\-]/g, '');
            } else {
                console.warn('Slug inputs not found');
            }
        }

        async function loadDashboardStats() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/products/dashboard`, {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                });
                if (!response.ok) {
                    throw new Error(`Failed to fetch dashboard stats: ${await response.text()}`);
                }
                const data = await response.json();
                totalProductCard.textContent = `Total Product: ${data.totalProducts}`;
                totalVendorCard.textContent = `Total Vendor: ${data.totalVendors}`;
                uniqueProductCard.textContent = `Unique Product: ${data.uniqueProducts}`;
            } catch (err) {
                console.error('Error loading dashboard stats:', err);
                totalProductCard.textContent = 'Total Product: Error';
                totalVendorCard.textContent = 'Total Vendor: Error';
                uniqueProductCard.textContent = 'Unique Product: Error';
            }
        }

        async function loadProducts(page = 1, search = '') {
            try {
                const url = `${API_BASE_URL}/api/products?page=${page}&pageSize=${pageSize}${search ? `&search=${encodeURIComponent(search)}` : ''}`;
                console.log('Fetching products:', url);
                const response = await fetch(url, {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                });
                if (!response.ok) {
                    throw new Error(`Failed to fetch products: ${await response.text()}`);
                }
                const data = await response.json();
                await loadCart();
                renderProducts(data.products || [], data.total || 0, page);
            } catch (err) {
                console.error('Error loading products:', err);
                resultsCount.textContent = 'Error loading products';
                productGrid.innerHTML = '';
            }
        }

        async function loadCart() {
            try {
                console.log('Loading cart for user:', userId);
                const response = await fetch(`${API_BASE_URL}/api/cart/${userId}`, {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                });
                if (!response.ok) {
                    throw new Error(`Failed to fetch cart: ${await response.text()}`);
                }
                cartItems = await response.json();
                console.log('Cart items loaded:', cartItems);
                renderCartItems(cartItems);
            } catch (err) {
                console.error('Error loading cart:', err);
                cartItems = [];
                renderCartItems([]);
            }
        }

        function renderProducts(products, total, page) {
            if (!Array.isArray(products)) {
                console.error('Products is not an array:', products);
                productGrid.innerHTML = '';
                resultsCount.textContent = 'No products available';
                paginationContainer.innerHTML = '';
                return;
            }

            productGrid.innerHTML = products.map(product => {
                const discountedPrice = product.discountedPrice ? `$${product.discountedPrice.toFixed(2)}` : '';
                const originalPrice = product.price ? `$${product.price.toFixed(2)}` : '';
                const cartItem = cartItems.find(item => item.productId === product.id);
                const quantity = cartItem ? cartItem.quantity : 0;

                return `
                <div class="rounded-lg overflow-hidden shadow-sm flex flex-col" data-product-id="${product.id}">
                    <img src="${API_BASE_URL}${product.imageUrl || '/images/placeholder.jpg'}" alt="${product.name}" class="w-full h-48 object-cover" />
                    <div class="p-4 flex flex-col gap-2">
                        <h3 class="font-semibold text-sm text-[#252C32]">${product.name}</h3>
                        <div class="flex items-center space-x-2 text-sm">
                            <span class="text-[#2F80ED] font-semibold">${discountedPrice || originalPrice}</span>
                            ${discountedPrice ? `<del class="text-gray-500">${originalPrice}</del>` : ''}
                        </div>
                        ${quantity > 0 ? `
                            <div class="inline-flex items-center text-sm mt-2">
                                <button class="decrement-btn px-2 py-1 text-white bg-[#2F80ED] rounded-l hover:bg-[#1E63B0] transition">-</button>
                                <span class="px-3 py-1 text-white bg-[#2F80ED]">${quantity}</span>
                                <button class="increment-btn px-2 py-1 text-white bg-[#2F80ED] rounded-r hover:bg-[#1E63B0] transition">+</button>
                            </div>
                        ` : `
                            <button class="add-to-cart-btn mt-2 w-fit px-3 py-1 text-sm text-black bg-white border border-gray-300 rounded hover:bg-[#2F80ED] hover:text-white transition">
                                Add to Cart
                            </button>
                        `}
                    </div>
                </div>
            `;
            }).join('');

            const start = (page - 1) * pageSize + 1;
            const end = Math.min(page * pageSize, total);
            resultsCount.textContent = `Showing ${start}–${end} of ${total} results`;

            const totalPages = Math.ceil(total / pageSize);
            paginationContainer.innerHTML = `
            <button class="pagination-btn" data-page="${page - 1}" ${page === 1 ? 'disabled' : ''} class="px-2 py-1 rounded hover:bg-gray-200">←</button>
            ${Array.from({ length: Math.min(5, totalPages) }, (_, i) => i + 1).map(i => `
                <button class="pagination-btn" data-page="${i}" class="px-3 py-1 rounded ${i === page ? 'bg-[#2F80ED] text-white' : 'hover:bg-gray-200'}">${i}</button>
            `).join('')}
            ${totalPages > 5 ? '<span>...</span>' : ''}
            <button class="pagination-btn" data-page="${page + 1}" ${page === totalPages ? 'disabled' : ''} class="px-2 py-1 rounded hover:bg-gray-200">Next →</button>
        `;

            // Attach event listeners
            attachEventListeners();
        }

        function renderCartItems(cartItems) {
            if (!cartItemsContainer || !cartCount || !cartSubtotal) {
                console.error('Cart UI elements not found:', {
                    cartItemsContainer: !!cartItemsContainer,
                    cartCount: !!cartCount,
                    cartSubtotal: !!cartSubtotal
                });
                return;
            }

            if (!Array.isArray(cartItems) || cartItems.length === 0) {
                cartItemsContainer.innerHTML = '<p class="text-sm text-[#777777]">Your cart is empty</p>';
                cartCount.textContent = '0';
                cartSubtotal.textContent = '0.00';
                console.log('Cart is empty');
                return;
            }

            let totalItems = 0;
            let subtotal = 0;

            cartItemsContainer.innerHTML = cartItems.map(item => {
                const product = item.product;
                const price = product.discountedPrice || product.price;
                const itemTotal = price * item.quantity;
                subtotal += itemTotal;
                totalItems += item.quantity;

                return `
                <div class="mb-4 pb-4 border-b border-dashed border-[#E5E9EB]">
                    <div class="flex items-center justify-between">
                        <div class="w-16 h-16 flex-shrink-0 rounded overflow-hidden bg-gray-100">
                            <img src="${API_BASE_URL}${product.imageUrl || '/images/placeholder.jpg'}" alt="${product.name}" class="w-full h-full object-cover">
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="font-medium text-[#252C32] text-sm">${product.name}</p>
                            <p class="text-xs text-[#5F6D7E] mt-1">Qty: ${item.quantity}</p>
                        </div>
                        <div class="text-right text-sm font-semibold text-[#252C32]">
                            $${price.toFixed(2)}
                        </div>
                    </div>
                </div>
            `;
            }).join('');

            cartCount.textContent = totalItems;
            cartSubtotal.textContent = subtotal.toFixed(2);
            console.log('Cart rendered:', { totalItems, subtotal });
        }

        async function addToCart(productId) {
            try {
                console.log('Adding to cart:', productId);
                const response = await fetch(`${API_BASE_URL}/api/cart`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: userId,
                        productId: productId,
                        quantity: 1
                    })
                });
                if (!response.ok) {
                    throw new Error(`Failed to add to cart: ${await response.text()}`);
                }
                await loadCart();
                await loadProducts(currentPage, searchInput?.value || '');
                if (window.openCartSidebar) {
                    window.openCartSidebar();
                } else {
                    console.error('window.openCartSidebar not found, falling back to direct toggle');
                    const cartSidebar = document.getElementById('cart-sidebar');
                    if (cartSidebar) {
                        cartSidebar.classList.remove('translate-x-full');
                        cartSidebar.classList.add('translate-x-0');
                        console.log('Cart sidebar opened via fallback');
                    } else {
                        console.error('Cart sidebar DOM element not found');
                    }
                }
            } catch (err) {
                console.error('Error adding to cart:', err);
                alert('Failed to add product to cart');
            }
        }

        async function updateQuantity(productId, newQuantity) {
            try {
                console.log('Updating quantity:', { productId, newQuantity });
                const response = await fetch(`${API_BASE_URL}/api/cart/${userId}/${productId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ quantity: newQuantity })
                });
                if (!response.ok) {
                    throw new Error(`Failed to update cart: ${await response.text()}`);
                }
                await loadCart();
                await loadProducts(currentPage, searchInput?.value || '');
            } catch (err) {
                console.error('Error updating cart:', err);
                alert('Failed to update cart');
            }
        }

        function attachEventListeners() {
            // Handle Add to Cart buttons
            const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
            addToCartButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const productId = parseInt(button.closest('[data-product-id]').dataset.productId);
                    console.log('Add to cart clicked for product:', productId);
                    addToCart(productId);
                });
            });

            // Handle decrement buttons
            const decrementButtons = document.querySelectorAll('.decrement-btn');
            decrementButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const productId = parseInt(button.closest('[data-product-id]').dataset.productId);
                    const currentQuantity = parseInt(button.nextElementSibling.textContent);
                    console.log('Decrement clicked for product:', productId, 'New quantity:', currentQuantity - 1);
                    updateQuantity(productId, currentQuantity - 1);
                });
            });

            // Handle increment buttons
            const incrementButtons = document.querySelectorAll('.increment-btn');
            incrementButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const productId = parseInt(button.closest('[data-product-id]').dataset.productId);
                    const currentQuantity = parseInt(button.previousElementSibling.textContent);
                    console.log('Increment clicked for product:', productId, 'New quantity:', currentQuantity + 1);
                    updateQuantity(productId, currentQuantity + 1);
                });
            });

            // Handle pagination buttons
            const paginationButtons = document.querySelectorAll('.pagination-btn');
            paginationButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const page = parseInt(button.dataset.page);
                    if (!isNaN(page)) {
                        console.log('Pagination clicked for page:', page);
                        loadProducts(page, searchInput?.value || '');
                    }
                });
            });
        }

        if (document.querySelector('input[name="Name"]')) {
            document.querySelector('input[name="Name"]').addEventListener('input', generateSlug);
        }

        if (addProductToggle) {
            addProductToggle.addEventListener('click', () => {
                modal.classList.remove('hidden');
            });
        }

        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', () => {
                modal.classList.add('hidden');
            });
        }

        if (searchInput) {
            let debounceTimeout;
            searchInput.addEventListener('input', () => {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(() => {
                    currentPage = 1;
                    loadProducts(currentPage, searchInput.value);
                }, 300);
            });
        }

        if (perPageSelect) {
            perPageSelect.addEventListener('change', () => {
                pageSize = parseInt(perPageSelect.value);
                currentPage = 1;
                loadProducts(currentPage, searchInput?.value || '');
            });
        }

        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(form);
                try {
                    const response = await fetch(`${API_BASE_URL}/api/products`, {
                        method: 'POST',
                        body: formData
                    });
                    if (response.ok) {
                        alert('Product added successfully!');
                        modal.classList.add('hidden');
                        form.reset();
                        loadProducts(currentPage, searchInput?.value || '');
                        loadDashboardStats();
                    } else {
                        const error = await response.text();
                        alert('Failed to add product: ' + error);
                    }
                } catch (err) {
                    console.error('Error:', err);
                    alert('Something went wrong');
                }
            });
        }

        loadProducts();
        loadDashboardStats();
        loadCart();
    });
</script>